import { useState, useEffect } from "react";
import { Play, Pause, RotateCcw, FastForward, Volume2, VolumeX, Camera, Sparkles, User, Eye, Palette } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";

export function InteractiveTutorialVideo() {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [progress, setProgress] = useState(0);
  const [speed, setSpeed] = useState(1);
  const [isMuted, setIsMuted] = useState(false);

  // Comprehensive tutorial steps for FaceApp Studio
  const tutorialSteps = [
    {
      title: "ูุฑุญุจุงู ุจู ูู FaceApp Studio",
      content: "ุฃููู ุชุทุจูู ูุชุญุฑูุฑ ุงููุฌู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูุนุงูู ุงูุนุฑุจู",
      duration: 4000,
      icon: <Sparkles className="w-12 h-12 text-yellow-400" />,
      actions: ["ุนุฑุถ ุงููุงุฌูุฉ ุงูุฑุฆูุณูุฉ", "ุดุฑุญ ุงูููุฒุงุช ุงูุฃุณุงุณูุฉ", "ุงูุชุนุฑู ุนูู ุงูุฃุฏูุงุช"]
    },
    {
      title: "ุชุณุฌูู ุงูุฏุฎูู ูุงูุงุดุชุฑุงู",
      content: "ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ ูุงูุงุดุชุฑุงู ูู ุงูุฎุทุฉ ุงูููุงุณุจุฉ",
      duration: 5000,
      icon: <User className="w-12 h-12 text-blue-400" />,
      actions: ["ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ", "ุงุฎุชูุงุฑ ุฎุทุฉ ุงูุงุดุชุฑุงู", "ุทุฑู ุงูุฏูุน ุงููุชุงุญุฉ", "ุชูุนูู ุงูุญุณุงุจ"]
    },
    {
      title: "ุฑูุน ุงูุตูุฑ ูุงูุชูุงุท ุงูุตูุฑ",
      content: "ุชุนูู ููููุฉ ุฑูุน ุงูุตูุฑ ูู ุงููุนุฑุถ ุฃู ุงูุชูุงุทูุง ุจุงููุงููุฑุง",
      duration: 4500,
      icon: <Camera className="w-12 h-12 text-green-400" />,
      actions: ["ุฑูุน ุตูุฑุฉ ูู ุงููุนุฑุถ", "ุงูุชูุงุท ุตูุฑุฉ ุฌุฏูุฏุฉ", "ูุชุทูุจุงุช ุฌูุฏุฉ ุงูุตูุฑุฉ", "ูุตุงุฆุญ ููุญุตูู ุนูู ุฃูุถู ูุชุงุฆุฌ"]
    },
    {
      title: "ุชุฃุซูุฑุงุช ุงูุนูุฑ - ุงุฌุนู ููุณู ุฃุตุบุฑ ุฃู ุฃูุจุฑ",
      content: "ุชุทุจูู ุชุฃุซูุฑุงุช ุงูุนูุฑ ูุชุจุฏู ุฃุตุบุฑ ุณูุงู ุฃู ุฃูุจุฑ ุจูุงูุนูุฉ",
      duration: 6000,
      icon: <User className="w-12 h-12 text-purple-400" />,
      actions: ["ุชุฃุซูุฑ ุฃุตุบุฑ ุณูุงู", "ุชุฃุซูุฑ ุฃูุจุฑ ุณูุงู", "ุถุจุท ุดุฏุฉ ุงูุชุฃุซูุฑ", "ูุนุงููุฉ ุงููุชูุฌุฉ ุงูููุงุฆูุฉ"]
    },
    {
      title: "ุชุญููู ุงูุฌูุณ - ุฐูุฑ ุฅูู ุฃูุซู ูุงูุนูุณ",
      content: "ุชุฌุฑุจุฉ ูุธูุฑู ุจููุงูุญ ุงูุฌูุณ ุงูุขุฎุฑ ุจุทุฑููุฉ ูุงูุนูุฉ",
      duration: 5500,
      icon: <User className="w-12 h-12 text-pink-400" />,
      actions: ["ุชุญููู ุฅูู ูุธูุฑ ุฃูุซูู", "ุชุญููู ุฅูู ูุธูุฑ ุฐููุฑู", "ุถุจุท ููุฉ ุงูุชุญููู", "ุงูุญูุงุธ ุนูู ุงูููุงูุญ ุงูุทุจูุนูุฉ"]
    },
    {
      title: "ุฅุถุงูุฉ ุงูุงุจุชุณุงูุฉ ูุงูุชุนุจูุฑุงุช",
      content: "ุชุทุจูู ุชุนุจูุฑุงุช ูุฎุชููุฉ ูุซู ุงูุงุจุชุณุงูุฉ ูุงูุถุญู",
      duration: 4500,
      icon: <Eye className="w-12 h-12 text-orange-400" />,
      actions: ["ุฅุถุงูุฉ ุงุจุชุณุงูุฉ ุทุจูุนูุฉ", "ุถุญูุฉ ุนุฑูุถุฉ", "ุชุนุจูุฑุงุช ุงูุนููู", "ุถุจุท ุทุจูุนูุฉ ุงูุชุนุจูุฑ"]
    },
    {
      title: "ุชุทุจูู ุงููููุงุฌ ุงูุงูุชุฑุงุถู",
      content: "ุฅุถุงูุฉ ูููุงุฌ ุงุญุชุฑุงูู ูุฃููุงู ูุชููุนุฉ ููุดูุงู ูุงูุนููู",
      duration: 7000,
      icon: <Palette className="w-12 h-12 text-red-400" />,
      actions: ["ุฃุญูุฑ ุดูุงู ุจุฃููุงู ูุฎุชููุฉ", "ูููุงุฌ ุงูุนููู", "ูุญู ููุงุณูุงุฑุง", "ุฃุณุงุณ ูุจูุฏุฑุฉ", "ุถุจุท ุดุฏุฉ ุงููููุงุฌ"]
    },
    {
      title: "ุชุฃุซูุฑุงุช ุงูุดุนุฑ ูุงูุนููู",
      content: "ุชุบููุฑ ููู ุงูุดุนุฑ ูุงูุนููู ูุฅุถุงูุฉ ุงููุญูุฉ",
      duration: 5500,
      icon: <Sparkles className="w-12 h-12 text-teal-400" />,
      actions: ["ุชุบููุฑ ููู ุงูุดุนุฑ", "ุชุบููุฑ ููู ุงูุนููู", "ุฅุถุงูุฉ ูุญูุฉ ุฃู ุดุงุฑุจ", "ุชูุจูุฑ ุญุฌู ุงูุนููู"]
    },
    {
      title: "ุชุฃุซูุฑุงุช ุงูุฌูุงู ูุงูุฅุดุฑุงู",
      content: "ุชุญุณูู ููุงูุญ ุงููุฌู ูุฅุถุงูุฉ ุฅุดุฑุงู ุทุจูุนู ููุจุดุฑุฉ",
      duration: 5000,
      icon: <Sparkles className="w-12 h-12 text-amber-400" />,
      actions: ["ูุนููุฉ ุงูุจุดุฑุฉ", "ุฅุดุฑุงู ุทุจูุนู", "ุชุญุณูู ุงูููุงูุญ", "ุฅุฒุงูุฉ ุงูุนููุจ"]
    },
    {
      title: "ุงูุชุญูู ุจุดุฏุฉ ุงูุชุฃุซูุฑุงุช",
      content: "ููููุฉ ุถุจุท ููุฉ ูู ุชุฃุซูุฑ ููุญุตูู ุนูู ุงููุชูุฌุฉ ุงููุซุงููุฉ",
      duration: 4000,
      icon: <Eye className="w-12 h-12 text-indigo-400" />,
      actions: ["ุงุณุชุฎุฏุงู ุดุฑูุท ุงูุชุญูู", "ูุนุงููุฉ ูุจุงุดุฑุฉ", "ุฏูุฌ ุนุฏุฉ ุชุฃุซูุฑุงุช", "ุงูุญุตูู ุนูู ูุชูุฌุฉ ุทุจูุนูุฉ"]
    },
    {
      title: "ุญูุธ ููุดุงุฑูุฉ ุงููุชุงุฆุฌ",
      content: "ุชุตุฏูุฑ ุงูุตูุฑ ุงูููุงุฆูุฉ ููุดุงุฑูุชูุง ุนูู ูุณุงุฆู ุงูุชูุงุตู",
      duration: 4500,
      icon: <Camera className="w-12 h-12 text-cyan-400" />,
      actions: ["ุญูุธ ุจุฌูุฏุฉ ุนุงููุฉ", "ูุดุงุฑูุฉ ูุจุงุดุฑุฉ", "ุญูุธ ูู ุงููุนุฑุถ", "ููุงุฑูุฉ ูุจู ูุจุนุฏ"]
    }
  ];

  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (isPlaying && currentStep < tutorialSteps.length) {
      interval = setInterval(() => {
        setProgress(prev => {
          const newProgress = prev + (100 / (tutorialSteps[currentStep].duration / 100)) * speed;
          
          if (newProgress >= 100) {
            if (currentStep < tutorialSteps.length - 1) {
              setCurrentStep(prev => prev + 1);
              return 0;
            } else {
              setIsPlaying(false);
              return 100;
            }
          }
          
          return newProgress;
        });
      }, 100);
    }
    
    return () => clearInterval(interval);
  }, [isPlaying, currentStep, speed, tutorialSteps.length]);

  const togglePlay = () => {
    setIsPlaying(!isPlaying);
  };

  const restart = () => {
    setCurrentStep(0);
    setProgress(0);
    setIsPlaying(true);
  };

  const toggleSpeed = () => {
    setSpeed(speed === 1 ? 2 : speed === 2 ? 0.5 : 1);
  };

  const toggleMute = () => {
    setIsMuted(!isMuted);
  };

  const goToStep = (stepIndex: number) => {
    setCurrentStep(stepIndex);
    setProgress(0);
  };

  const currentStepData = tutorialSteps[currentStep];

  return (
    <div className="max-w-6xl mx-auto p-6" dir="rtl">
      <Card className="shadow-xl">
        <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
          <CardTitle className="text-3xl text-center">
            ๐ญ ุงูุฏููู ุงูุดุงูู ูู FaceApp Studio
          </CardTitle>
          <p className="text-center text-lg opacity-90">
            ุชุนูู ุฌููุน ููุฒุงุช ุชุญุฑูุฑ ุงููุฌู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู ุฎุทูุฉ ุจุฎุทูุฉ
          </p>
        </CardHeader>
        <CardContent className="p-0">
          {/* Video Display Area */}
          <div className="aspect-video bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 relative overflow-hidden">
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="text-center text-white p-8 max-w-2xl">
                <div className="mb-6 animate-bounce">
                  {currentStepData?.icon}
                </div>
                <h3 className="text-4xl font-bold mb-4 leading-tight">
                  {currentStepData?.title}
                </h3>
                <p className="text-xl opacity-90 mb-6">
                  {currentStepData?.content}
                </p>
                
                {/* Demo Actions */}
                <div className="grid grid-cols-2 gap-3 mb-6">
                  {currentStepData?.actions.slice(0, 4).map((action, index) => (
                    <div 
                      key={index} 
                      className="bg-white/10 backdrop-blur-sm rounded-lg p-3 text-sm animate-pulse"
                      style={{ animationDelay: `${index * 0.5}s` }}
                    >
                      โจ {action}
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Floating Elements */}
              <div className="absolute top-4 right-4 flex gap-2">
                <Badge variant="secondary" className="bg-white/20 text-white">
                  ูุจุงุดุฑ
                </Badge>
                <Badge variant="secondary" className="bg-white/20 text-white">
                  HD
                </Badge>
              </div>
            </div>
            
            {/* Progress Bar */}
            <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/50 to-transparent">
              <Progress value={progress} className="h-3 mb-2" />
              <div className="flex justify-between text-white text-sm">
                <span>ุงูุฎุทูุฉ {currentStep + 1} ูู {tutorialSteps.length}</span>
                <span>{Math.round(progress)}% ููุชูู</span>
              </div>
            </div>
          </div>

          {/* Controls */}
          <div className="p-6 bg-gray-50">
            <div className="flex items-center justify-center gap-4 mb-6">
              <Button onClick={togglePlay} size="lg" className="bg-blue-600 hover:bg-blue-700">
                {isPlaying ? <Pause className="w-6 h-6 ml-2" /> : <Play className="w-6 h-6 ml-2" />}
                {isPlaying ? "ุฅููุงู ูุคูุช" : "ุชุดุบูู"}
              </Button>
              
              <Button onClick={restart} variant="outline" size="lg">
                <RotateCcw className="w-5 h-5 ml-2" />
                ุฅุนุงุฏุฉ ุชุดุบูู
              </Button>
              
              <Button onClick={toggleSpeed} variant="outline">
                <FastForward className="w-5 h-5 ml-2" />
                ุงูุณุฑุนุฉ {speed}x
              </Button>
              
              <Button onClick={toggleMute} variant="outline">
                {isMuted ? <VolumeX className="w-5 h-5 ml-2" /> : <Volume2 className="w-5 h-5 ml-2" />}
                {isMuted ? "ุฅูุบุงุก ูุชู" : "ูุชู ุงูุตูุช"}
              </Button>
            </div>

            {/* Quick Navigation */}
            <div className="flex flex-wrap justify-center gap-2 mb-6">
              {tutorialSteps.map((step, index) => (
                <Button
                  key={index}
                  onClick={() => goToStep(index)}
                  variant={currentStep === index ? "default" : "outline"}
                  size="sm"
                  className="min-w-[120px]"
                >
                  {index + 1}. {step.title.split(' - ')[0]}
                </Button>
              ))}
            </div>
          </div>

          {/* Step Details */}
          <div className="p-6">
            <h4 className="font-bold text-2xl mb-4 text-center">ูุญุชููุงุช ุงูุฏูุฑุฉ ุงูุชุฏุฑูุจูุฉ</h4>
            <div className="grid md:grid-cols-2 gap-4">
              {tutorialSteps.map((step, index) => (
                <Card 
                  key={index} 
                  className={`cursor-pointer transition-all duration-300 hover:shadow-lg ${
                    currentStep === index 
                      ? 'border-blue-500 bg-blue-50 shadow-lg transform scale-105' 
                      : 'hover:bg-gray-50'
                  }`}
                  onClick={() => goToStep(index)}
                >
                  <CardContent className="p-5">
                    <div className="flex items-start gap-4">
                      <div className="flex-shrink-0">
                        {step.icon}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between mb-2">
                          <Badge 
                            variant={currentStep === index ? "default" : "secondary"}
                            className="mb-2"
                          >
                            ุงูุฎุทูุฉ {index + 1}
                          </Badge>
                          {currentStep === index && isPlaying && (
                            <div className="flex items-center gap-1 text-green-600">
                              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                              <span className="text-xs">ููุฏ ุงูุชุดุบูู</span>
                            </div>
                          )}
                        </div>
                        <h5 className="font-bold text-lg mb-2">{step.title}</h5>
                        <p className="text-gray-600 mb-3">{step.content}</p>
                        
                        <div className="space-y-1">
                          <p className="text-xs font-semibold text-gray-700">ูุง ุณุชุชุนููู:</p>
                          <ul className="text-sm text-gray-600 space-y-1">
                            {step.actions.map((action, actionIndex) => (
                              <li key={actionIndex} className="flex items-center gap-2">
                                <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
                                {action}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}